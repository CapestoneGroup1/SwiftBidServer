diff --git a/src/config/MulterConfig.ts b/src/config/MulterConfig.ts
new file mode 100644
index 0000000..d91e14a
--- /dev/null
+++ b/src/config/MulterConfig.ts
@@ -0,0 +1,3 @@
+import multer from "multer"
+
+export const upload = multer({ storage: multer.memoryStorage() })
diff --git a/src/config/firebase.ts b/src/config/firebase.ts
index a3b402c..d7f9e2a 100644
--- a/src/config/firebase.ts
+++ b/src/config/firebase.ts
@@ -1,16 +1,11 @@
-// Import the functions you need from the SDKs you need
-import { initializeApp } from "firebase/app";
+import { FirebaseOptions } from "firebase/app"
 
-// Your web app's Firebase configuration
-export const firebaseConfig = {
-    apiKey: "AIzaSyBMeD0UrWkXUJu8q0ixZMXlX6Tl47PzSwI",
-    authDomain: "swiftbid-c5223.firebaseapp.com",
-    projectId: "swiftbid-c5223",
-    storageBucket: "swiftbid-c5223.appspot.com",
-    messagingSenderId: "727307033496",
-    appId: "1:727307033496:web:0a5e4a863148cdfdf3e9ed",
-    measurementId: "G-GKW2EX4DYP"
-};
-
-// Initialize Firebase
-const app = initializeApp(firebaseConfig);
+export const firebaseConfig: FirebaseOptions = {
+  apiKey: "AIzaSyBMeD0UrWkXUJu8q0ixZMXlX6Tl47PzSwI",
+  authDomain: "swiftbid-c5223.firebaseapp.com",
+  projectId: "swiftbid-c5223",
+  storageBucket: "swiftbid-c5223.appspot.com",
+  messagingSenderId: "727307033496",
+  appId: "1:727307033496:web:0a5e4a863148cdfdf3e9ed",
+  measurementId: "G-GKW2EX4DYP",
+}
diff --git a/src/controllers/CategoryController.ts b/src/controllers/CategoryController.ts
index 04c181c..c88df24 100644
--- a/src/controllers/CategoryController.ts
+++ b/src/controllers/CategoryController.ts
@@ -1,56 +1,51 @@
-import { NextFunction, Request,Response } from "express";
-import {CategoryModel} from "../models/category";
-export class CategoryController{
-
-
-    static async addCategory(req:Request,res:Response,next:NextFunction){
-        try {
-            // Extract product data from the request body
-            const { name } = req.body;
-            
-            const uniqueId = generateId();
-       
-            // Create a new category instance
-            const newCategory = new CategoryModel({ id: uniqueId, name });
-
-            const savedCategory = await newCategory.save();
-            res.status(201).json({ message: "Category added successfully", Category: newCategory });
-        } catch (error) {
-        
-            console.error("Error adding category:", error);
-            res.status(500).json({ message: "Internal server error" });
-        }
+import { NextFunction, Request, Response } from "express"
+import { CategoryModel } from "../models/category"
+import { BadRequest, NotFound } from "../utils/exceptions"
+import { AddCategoryRequest } from "../types";
+export class CategoryController {
+  static async addCategory(req: Request, res: Response, next: NextFunction) {
+    try {
+      // Extract product data from the request body
+      const { name } = req.body || {} as AddCategoryRequest;
+      if (!name) {
+        throw new BadRequest("Invalid Category Name")
+      }
+
+      const existingCategory = await CategoryModel.findOne({ name })
+      if(existingCategory?._id) {
+        throw new BadRequest("Category Already Exists")
+      }
+
+      // Create a new category instance
+      const newCategory = new CategoryModel({ name })
+      const savedCategory = await newCategory.save()
+      res.status(201).json({
+        id: savedCategory._id,
+        name: savedCategory.name,
+      })
+    } catch (error) {
+      next(error)
     }
-    static async deleteCategory(req: Request, res: Response, next: NextFunction) {
-        try {
-            // Extract category ID from the request body
-            const { id } = req.body;
+  }
 
-            // Find the category by ID
-            const categoryToDelete = await CategoryModel.findOne({ id });
+  static async deleteCategory(req: Request, res: Response, next: NextFunction) {
+    try {
+      // Extract category ID from the request body
+      const { id } = req.body
 
-            if (!categoryToDelete) {
-                return res.status(404).json({ message: "Category not found" });
-            }
+      // Find the category by ID
+      const categoryToDelete = await CategoryModel.findOne({ id })
 
-            // Delete the category
-            await CategoryModel.deleteOne({ id });
+      if (!categoryToDelete) {
+        throw new NotFound("Category not found")
+      }
 
-            res.status(200).json({ message: "Category deleted successfully", category: categoryToDelete });
-        } catch (error) {
-            console.error("Error deleting category:", error);
-            res.status(500).json({ message: "Internal server error" });
-        }
-       
-    }
+      // Delete the category
+      await CategoryModel.deleteOne({ id })
 
-}
-
-
-    function generateId() {
-        const min = 1000;
-          const max = 9999;
-          const randomID = Math.floor(Math.random() * (max - min + 1)) + min;
-          return randomID;
+      res.status(200).json({ message: "Category deleted successfully", category: categoryToDelete })
+    } catch (error) {
+      next(error)
     }
-
+  }
+}
diff --git a/src/controllers/ProductController.ts b/src/controllers/ProductController.ts
index f8e0bcc..d3a1396 100644
--- a/src/controllers/ProductController.ts
+++ b/src/controllers/ProductController.ts
@@ -1,114 +1,81 @@
-import { NextFunction, Request,Response } from "express";
-import { Product } from "../types";
-import {ProductSchema} from "../models/product";
-import multer from 'multer';
-import { initializeApp } from "firebase/app";
-import {getStorage,ref,getDownloadURL,uploadBytesResumable} from 'firebase/storage'
-import { firebaseConfig } from '../config/firebase';
-
-let storage: any;
-
-export async function FirebaseInitialize() {
-    // Check if Firebase app is already initialized
-    if (!storage) {
-        // Initialize Firebase app asynchronously
-        const app = initializeApp(firebaseConfig);
-        storage = getStorage(app);
-    }
-}
+import { NextFunction, Request, Response } from "express"
+import { ProductSchema } from "../models/product"
+import { ref, getDownloadURL, uploadBytesResumable } from "firebase/storage"
+import { CustomRequest, Product } from "../types"
+import { BadRequest } from "../utils/exceptions"
+import { FirebaseService } from "../services/FirebaseService"
+import { isUserRoleAdmin } from "../utils/commonUtils"
 
 export class ProductController {
+  static async addProduct(req: CustomRequest, res: Response, next: NextFunction) {
+    try {
+      // Extract product data from the request body
+      const { name, description, price, category, bidenddate } = req.body as Product
 
-    static async addProduct(req: Request, res: Response, next: NextFunction) {
-        try {
-            // Ensure Firebase is initialized
-            await FirebaseInitialize();
+      const file = req.file
+      if (!file) {
+        throw new BadRequest("Please upload an image")
+      }
 
-            // Extract product data from the request body
-            const { name, description, price, category, userid, status, bidenddate, adminapproval } = req.body;
+      const firebaseService = FirebaseService.initialize()
+      const firebaseImageUrl = await firebaseService.saveFileToFirebase(file.buffer, `${req.userId}-${new Date().getTime()}`)
 
-            // Get the file from the request
-            const file = req.file;
-            console.log(name,file);
-            if (!file) {
-                return res.status(400).json({ message: "Please upload an image" });
-            }
+      if (!firebaseImageUrl) {
+        throw new BadRequest("Failed to Upload Image Try again...")
+      }
 
-            // Use the initialized storage
-            const storageRef = ref(storage, file.originalname);
+      const newProduct = new ProductSchema({
+        name,
+        description,
+        price,
+        imageurl: firebaseImageUrl,
+        category,
+        userid: req.userId, // from auth token
+        bidenddate,
+        adminapproval: isUserRoleAdmin(req.user?.role || ""),
+      })
+      const savedProduct = await newProduct.save()
+      res.status(201).json({ ...savedProduct.toJSON() })
+    } catch (error) {
+      next(error)
+    }
+  }
 
-            // Upload image to Firebase Storage
-            const uploadTask = uploadBytesResumable(storageRef, file.buffer);
-            uploadTask.on('state_changed',
-                (snapshot) => {
-                    // Handle progress
-                },
-                (error) => {
-                    console.error("Error uploading image:", error);
-                    res.status(500).json({ message: "Failed to upload image" });
-                },
-                () => {
-                    // Upload completed successfully, get download URL
-                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {
-                        // Create a new product instance
-                        const newProduct = new ProductSchema({
-                            id: generateId(),
-                            name,
-                            description,
-                            price,
-                            imageurl: downloadURL,
-                            category,
-                            userid,
-                            status,
-                            bidenddate,
-                            adminapproval
-                        });
-                        // Save product to MongoDB
-                        const savedProduct = await newProduct.save();
-                        res.status(201).json({ message: "Product added successfully", product: newProduct });
-                    }).catch((error) => {
-                        console.error("Error getting download URL:", error);
-                        res.status(500).json({ message: "Failed to get image URL" });
-                    });
-                }
-            );
+  static async updateProduct(req: CustomRequest, res: Response, next: NextFunction) {
+    try {
+      // Extract updated product data from the request body
+      const { name, description, price, id, category } = req.body as Product
+      const existingProduct = await ProductSchema.findById(id)
+      if (!existingProduct?._id) {
+        throw new BadRequest("Invalid Product Id")
+      }
 
-        } catch (error) {
-            console.error("Error adding product:", error);
-            res.status(500).json({ message: "Internal server error" });
-        }
-    }
-    static async updateProduct(req: Request, res: Response, next: NextFunction) {
-        try {
-            // Extract product ID from request parameters
-            const {id} = req.body;
+      //TODO stop updating the product if there are any ongoing bids on the product.. handled in next sprint.
 
-            // Extract updated product data from the request body
-            const { name, description, price, imageurl,status } = req.body;
+      const file = req.file
+      let imageUrl
+      if (file) {
+        const firebaseService = FirebaseService.initialize()
+        imageUrl = await firebaseService.saveFileToFirebase(file.buffer, `${req.userId}-${new Date().getTime()}`)
+      }
 
-            // Find and update the product by ID
-            const updatedProduct = await ProductSchema.findOneAndUpdate(id, {
-                name,
-                description,
-                price,
-                imageurl,
-                status,
-            }, { new: true });
+      // Find and update the product by ID
+      const updatedProduct = await ProductSchema.findByIdAndUpdate(id, {
+        name,
+        description,
+        price,
+        category,
+        imageUrl: imageUrl,
+        adminapproval: isUserRoleAdmin(req.user?.role || ""),
+      }, { new: true })
 
-            if (!updatedProduct) {
-                return res.status(404).json({ message: "Product not found" });
-            }
+      if (!updatedProduct) {
+        throw new BadRequest("failed to Update Product Details")
+      }
 
-            res.status(200).json({ message: "Product updated successfully", product: updatedProduct });
-        } catch (error) {
-            console.error("Error updating product:", error);
-            res.status(500).json({ message: "Internal server error" });
-        }
+      res.status(200).json({ ...updatedProduct.toJSON() })
+    } catch (error) {
+      next(error)
     }
+  }
 }
-function generateId() {
-    const min = 1000;
-      const max = 9999;
-      const randomID = Math.floor(Math.random() * (max - min + 1)) + min;
-      return randomID;
-}
\ No newline at end of file
diff --git a/src/index.ts b/src/index.ts
index 08adb2a..453bf70 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -10,6 +10,7 @@ import { userRoutes } from "./routehandlers/userRoutes"
 import { productRoutes } from "./routehandlers/productRoutes"
 import { categoryRoutes } from "./routehandlers/categoryRoutes"
 import "./config/firebase"
+import { FirebaseService } from "./services/FirebaseService"
 
 const app = express()
 const port = process.env.PORT || 3000
@@ -27,8 +28,8 @@ app.get("/healthCheck", (req: Request, res: Response) => {
 
 app.use("/auth", userAuthRoutes)
 app.use("/user", userRoutes)
-app.use("/product",productRoutes)
-app.use("/category",categoryRoutes)
+app.use("/product", productRoutes)
+app.use("/category", categoryRoutes)
 
 /**
  * Global Error Handler for complete app.
@@ -48,6 +49,7 @@ app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
 })
 
 // Initializations..
+FirebaseService.initialize()
 EmailConfig.initialize()
 MongoClient.initialize()
   .then(() => {
diff --git a/src/middlewares/authMiddlewares.ts b/src/middlewares/authMiddlewares.ts
index 3a969eb..40c3af3 100644
--- a/src/middlewares/authMiddlewares.ts
+++ b/src/middlewares/authMiddlewares.ts
@@ -30,7 +30,9 @@ export const validateToken = async (req: CustomRequest, res: Response, next: Nex
     if (!payload) {
       throw new UnAuthenticatedError("Session Expired/Invalid")
     }
+    const userDetails = await getUserProfile(payload.id);
     req.userId = payload.id
+    req.user = userDetails as User;
     next()
   } catch (error) {
     next(error)
diff --git a/src/models/category.ts b/src/models/category.ts
index 36667db..206891f 100644
--- a/src/models/category.ts
+++ b/src/models/category.ts
@@ -1,14 +1,10 @@
-var mongoose = require('mongoose');
-var Schema = mongoose.Schema;
+import mongoose from "mongoose"
+
+var Schema = mongoose.Schema
 var CategorySchema = new Schema({
-  id:{
-    type: String,
-    unique:true,
-    required: true
-  },
   name: {
     type: String,
-    required: true
-  }
-});
+    required: true,
+  },
+})
 export const CategoryModel = mongoose.model("category", CategorySchema)
diff --git a/src/models/product.ts b/src/models/product.ts
index 2ee41cd..6f5c2af 100644
--- a/src/models/product.ts
+++ b/src/models/product.ts
@@ -1,43 +1,38 @@
-var mongoose = require('mongoose');
-var Schema = mongoose.Schema;
+import mongoose from "mongoose"
+var Schema = mongoose.Schema
 var products = new Schema({
-  id:{
-    type:String,
-    required:true,
-    unique:true
-  },
   name: {
     type: String,
-    required: true
+    required: true,
   },
   description: {
     type: String,
-    required: true
+    required: true,
   },
   price: {
     type: String,
-    required: true
+    required: true,
   },
   imageurl: {
     type: String,
-    required: true
+    required: true,
   },
   category: {
     type: Schema.Types.ObjectId,
-    required: true
+    required: true,
   },
   userid: {
     type: Schema.Types.ObjectId,
-    required: true
+    required: true,
   },
   status: {
-    type: Boolean
+    type: Boolean,
   },
   bidenddate: {
-    type: Date
+    type: Date,
   },
   adminapproval: {
-    type: Boolean
-  }
-});
+    type: Boolean,
+  },
+})
 export const ProductSchema = mongoose.model("Products", products)
diff --git a/src/routehandlers/categoryRoutes.ts b/src/routehandlers/categoryRoutes.ts
index 3f57384..7138e45 100644
--- a/src/routehandlers/categoryRoutes.ts
+++ b/src/routehandlers/categoryRoutes.ts
@@ -1,11 +1,11 @@
 import express from "express"
 import { CategoryController } from "../controllers/CategoryController"
+import { isUserAdmin, validateToken } from "../middlewares/authMiddlewares"
 
 const router = express.Router()
 
-router.post("/add", CategoryController.addCategory)
+router.post("/add", validateToken, isUserAdmin, CategoryController.addCategory)
 
-router.post("/delete", CategoryController.deleteCategory)
+router.post("/delete", validateToken, isUserAdmin, CategoryController.deleteCategory)
 
-
-export const categoryRoutes = router
+export const categoryRoutes = router
\ No newline at end of file
diff --git a/src/routehandlers/productRoutes.ts b/src/routehandlers/productRoutes.ts
index d370bba..7395a05 100644
--- a/src/routehandlers/productRoutes.ts
+++ b/src/routehandlers/productRoutes.ts
@@ -1,13 +1,11 @@
 import express from "express"
 import { ProductController } from "../controllers/ProductController"
-import multer from "multer";
-
-
-const upload = multer({storage: multer.memoryStorage()})
+import { upload } from "../config/MulterConfig"
+import { validateToken } from "../middlewares/authMiddlewares"
 const router = express.Router()
-router.post("/add", upload.single("file"),ProductController.addProduct)
 
-router.post("/update", ProductController.updateProduct)
+router.post("/add", validateToken, upload.single("file"), ProductController.addProduct)
 
+router.post("/update", validateToken, upload.single("file"), ProductController.updateProduct)
 
 export const productRoutes = router
diff --git a/src/services/FirebaseService.ts b/src/services/FirebaseService.ts
new file mode 100644
index 0000000..856a9c1
--- /dev/null
+++ b/src/services/FirebaseService.ts
@@ -0,0 +1,42 @@
+import { FirebaseApp, FirebaseOptions, initializeApp } from "firebase/app"
+import { firebaseConfig } from "../config/firebase"
+import {
+  FirebaseStorage,
+  StorageReference,
+  getDownloadURL,
+  getStorage,
+  ref,
+  uploadBytesResumable,
+} from "firebase/storage"
+
+export class FirebaseService {
+  static instance: FirebaseService
+  firebaseApp: FirebaseApp
+  storage: FirebaseStorage
+  storageRef: StorageReference
+
+  private constructor() {
+    this.firebaseApp = initializeApp(firebaseConfig)
+    this.storage = getStorage(this.firebaseApp)
+    this.storageRef = ref(this.storage)
+  }
+
+  static initialize() {
+    if (!FirebaseService.instance) {
+      FirebaseService.instance = new FirebaseService()
+    }
+    return FirebaseService.instance
+  }
+
+  async saveFileToFirebase(buffer: Buffer, reference: string): Promise<string | null> {
+    try {
+        this.storageRef = ref(this.storage, reference);
+      const uploadTaskSnapShot = await uploadBytesResumable(this.storageRef, buffer)
+      const url = await getDownloadURL(uploadTaskSnapShot.ref)
+      return url
+    } catch (error) {
+      console.error(error)
+      return null
+    }
+  }
+}
diff --git a/src/types.ts b/src/types.ts
index 8ffcce2..9e4287d 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -45,4 +45,7 @@ export interface Product {
   status?: boolean; 
   bidenddate?: Date; 
   adminapproval?: boolean; 
+}
+export interface AddCategoryRequest {
+  name: string
 }
\ No newline at end of file
diff --git a/src/utils/commonUtils.ts b/src/utils/commonUtils.ts
index 88c9e11..4bf4acb 100644
--- a/src/utils/commonUtils.ts
+++ b/src/utils/commonUtils.ts
@@ -7,3 +7,7 @@ export const generateOtp = () => {
 
   return otp
 }
+
+export const isUserRoleAdmin = (role: string) => {
+  return role && role.toLowerCase() === "admin"
+}
\ No newline at end of file
